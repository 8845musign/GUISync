/// <reference path="../../typings/github-electron/github-electron-renderer.d.ts" />;
/// <reference path="../../typings/bluebird/bluebird.d.ts" />;
// Services
var BrowserSyncService = require('./lib/modules/services/BrowserSyncService');
var SettingModel = require('./lib/modules/models/SettingModel');
var ConsoleService = require('./lib/modules/services/consoleService');
var SettingFileService = require('./lib/modules/services/SettingFileService');
// UI
var Dialog = require('./lib/modules/ui/dialog/dialog');
//View
var BtnActionView = require('./lib/modules/views/BtnActionView');
var UrlDisplayView = require('./lib/modules/views/UrlDisplayView');
var App = (function () {
    function App() {
        this.browserSync = new BrowserSyncService();
    }
    App.prototype.start = function () {
        this.urlDisplayView = new UrlDisplayView('.dispUrl__text');
        var btnActionView = new BtnActionView({
            selector: '#btnRun',
            startFunc: function (event) {
                if (this.browserSync.isRunning())
                    return;
                this.createSettingFile();
                var start = this.browserSync.start();
                start.on('start', function (data) {
                    this.console.log(data);
                    var url = this.browserSync.getUrlFromStdout(data);
                    this.urlDisplayView.setUrl(url);
                    this.console.log(data);
                    event.emit('started');
                });
                start.on('error', function (data) {
                    this.console.log(data);
                    this.urlDisplayView.clearUrl();
                    this.console.log(data);
                    event.emit('started');
                });
            }.bind(this),
            stopFunc: function (event) {
                this.browserSync.stop();
                this.urlDisplayView.clearUrl();
                event.emit('stoped');
            }.bind(this),
        });
        this.console = new ConsoleService('#windowConsole');
        this.checkBrowserSync();
    };
    App.prototype.checkBrowserSync = function () {
        BrowserSyncService.isInstelled().then(function () {
            // nothing
        }).catch(function () {
            Dialog.normal({
                text: "BrowserSyncをインストールします",
                buttonText: "OK",
                callback: function () {
                    var install = BrowserSyncService.install();
                    install.on('install', function () {
                        Dialog.normal({ text: 'インストール完了しました', buttonText: 'OK' });
                    });
                }
            });
        });
    };
    App.prototype.onClickStopBtn = function (e) {
        if (this.browserSync.isRunning() === false)
            return;
        this.browserSync.stop();
        this.btnStart.disabled = false;
        e.preventDefault();
    };
    App.prototype.createSettingFile = function () {
        var user = document.getElementById('authUser').value;
        var pass = document.getElementById('authPass').value;
        var proxyTarget = document.getElementById('proxyTarget').value;
        var setting = new SettingModel({
            target: proxyTarget,
            basicId: user,
            basicPassword: pass
        });
        SettingFileService.create(setting);
    };
    return App;
})();

//# sourceMappingURL=data:application/json;base64,