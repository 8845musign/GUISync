/// <reference path="../../../../../typings/github-electron/github-electron-renderer.d.ts" />;
var Events = require('events');
var EventEmitter = Events.EventEmitter;
var spawn = require('child_process').spawn;
var BrowserSyncService = (function () {
    function BrowserSyncService() {
        this.currentDir = __dirname;
        this.app = [];
        this.app.push(__dirname + "/../../../node_modules/browser-sync/bin/browser-sync.js");
        this.app.push('start');
        this.app.push("--config");
        this.app.push(__dirname + "/../../../../bs-config.js");
        this.child = null;
        return this;
    }
    BrowserSyncService.prototype.isRunning = function () {
        return (this.child) ? true : false;
    };
    BrowserSyncService.prototype.start = function () {
        if (this.child !== null) {
            throw new Error('BrowserSync has been already started.');
        }
        this.child = spawn('node', this.app, { cwd: __dirname });
        this.pid = spawn.pid;
        var event = new EventEmitter();
        this.child.stdout.on('data', function (data) {
            console.log('stdout: ' + data);
            event.emit('start', data);
        });
        this.child.stderr.on('data', function (data) {
            console.log('stderr: ' + data);
            event.emit('error', data);
        });
        return event;
    };
    BrowserSyncService.prototype.stop = function () {
        this.child.kill();
        this.child = null;
    };
    BrowserSyncService.install = function () {
        var install = spawn('npm', ['install'], { cwd: __dirname });
        var event = new EventEmitter();
        install.stdout.on('data', function (data) {
            console.log('stdout: ' + data);
            event.emit('install', data);
        });
        install.stderr.on('data', function (data) {
            console.log('stderr: ' + data);
            event.emit('error', data);
        });
        return event;
    };
    BrowserSyncService.isInstelled = function (callback) {
        var version = spawn('browsers-sync', ['--version']);
        version.stdout.on('data', function (data) {
            callback(true, data);
        });
        version.stderr.on('data', function (data) {
            callback(false, data);
        });
        version.on('error', function (data) {
            callback(false, data);
        });
    };
    return BrowserSyncService;
})();
exports.BrowserSyncService = BrowserSyncService;
exports = BrowserSyncService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tb2R1bGVzL3NlcnZpY2VzL0Jyb3dzZXJTeW5jU2VydmljZS50cyJdLCJuYW1lcyI6WyJCcm93c2VyU3luY1NlcnZpY2UiLCJCcm93c2VyU3luY1NlcnZpY2UuY29uc3RydWN0b3IiLCJCcm93c2VyU3luY1NlcnZpY2UuaXNSdW5uaW5nIiwiQnJvd3NlclN5bmNTZXJ2aWNlLnN0YXJ0IiwiQnJvd3NlclN5bmNTZXJ2aWNlLnN0b3AiLCJCcm93c2VyU3luY1NlcnZpY2UuaW5zdGFsbCIsIkJyb3dzZXJTeW5jU2VydmljZS5pc0luc3RlbGxlZCJdLCJtYXBwaW5ncyI6IkFBQUEsOEZBQThGO0FBRzlGLElBQU8sTUFBTSxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ2xDLElBQU8sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7QUFDMUMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUUzQztJQU1FQTtRQUNFQyxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxTQUFTQSxDQUFDQTtRQUM1QkEsSUFBSUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDZEEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EseURBQXlEQSxDQUFDQSxDQUFDQTtRQUNyRkEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQUE7UUFDdEJBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFFQSxTQUFTQSxHQUFHQSwyQkFBMkJBLENBQUNBLENBQUNBO1FBRXhEQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUVsQkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7SUFDZEEsQ0FBQ0E7SUFFTUQsc0NB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QUFDQSxFQUFFQSxDQUFDQSxNQUFNQSxFQUFFQSxVQUFTQSxJQUFJQTtZQUNyQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQ0EsQ0FBQ0E7UUFFSEEsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsTUFBTUEsRUFBRUEsVUFBU0EsSUFBSUE7WUFDckMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUNBLENBQUNBO1FBRUhBLE9BQU9BLENBQUNBLEVBQUVBLENBQUNBLE9BQU9BLEVBQUVBLFVBQVNBLElBQUlBO1lBQy9CLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDQSxDQUFDQTtJQUNMQSxDQUFDQTtJQUNITix5QkFBQ0E7QUFBREEsQ0FuRkEsQUFtRkNBLElBQUE7QUFuRlksMEJBQWtCLHFCQW1GOUIsQ0FBQTtBQUNELE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyIsImZpbGUiOiJsaWIvbW9kdWxlcy9zZXJ2aWNlcy9Ccm93c2VyU3luY1NlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vLi4vLi4vdHlwaW5ncy9naXRodWItZWxlY3Ryb24vZ2l0aHViLWVsZWN0cm9uLXJlbmRlcmVyLmQudHNcIiAvPjtcblxuaW1wb3J0IHJlbW90ZSA9IHJlcXVpcmUoJ3JlbW90ZScpO1xuaW1wb3J0IEV2ZW50cyA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuaW1wb3J0IEV2ZW50RW1pdHRlciA9IEV2ZW50cy5FdmVudEVtaXR0ZXI7XG52YXIgc3Bhd24gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuc3Bhd247XG5cbmV4cG9ydCBjbGFzcyBCcm93c2VyU3luY1NlcnZpY2Uge1xuICBwcml2YXRlIGN1cnJlbnREaXI6c3RyaW5nO1xuICBwcml2YXRlIGFwcDpBcnJheTxzdHJpbmc+O1xuICBwcml2YXRlIHBpZDpOdW1iZXI7XG4gIHByaXZhdGUgY2hpbGQ6YW55OyAvLyBjbGkgY2hpbGQgcHJvY2Vzc1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY3VycmVudERpciA9IF9fZGlybmFtZTtcbiAgICB0aGlzLmFwcCA9IFtdO1xuICAgIHRoaXMuYXBwLnB1c2goX19kaXJuYW1lICsgXCIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItc3luYy9iaW4vYnJvd3Nlci1zeW5jLmpzXCIpO1xuICAgIHRoaXMuYXBwLnB1c2goJ3N0YXJ0JylcbiAgICB0aGlzLmFwcC5wdXNoKFwiLS1jb25maWdcIik7XG4gICAgdGhpcy5hcHAucHVzaCggX19kaXJuYW1lICsgXCIvLi4vLi4vLi4vLi4vYnMtY29uZmlnLmpzXCIpO1xuXG4gICAgdGhpcy5jaGlsZCA9IG51bGw7XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIHB1YmxpYyBpc1J1bm5pbmcoKSA6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5jaGlsZCkgPyB0cnVlIDogZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoKSA6IEV2ZW50RW1pdHRlciB7XG4gICAgaWYgKHRoaXMuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQnJvd3NlclN5bmMgaGFzIGJlZW4gYWxyZWFkeSBzdGFydGVkLicpO1xuICAgIH1cblxuICAgIHRoaXMuY2hpbGQgPSBzcGF3bignbm9kZScsIHRoaXMuYXBwLCB7IGN3ZDogX19kaXJuYW1lIH0pO1xuICAgIHRoaXMucGlkID0gc3Bhd24ucGlkO1xuXG4gICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgdGhpcy5jaGlsZC5zdGRvdXQub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKXtcbiAgICAgIGNvbnNvbGUubG9nKCdzdGRvdXQ6ICcgKyBkYXRhKTtcbiAgICAgIGV2ZW50LmVtaXQoJ3N0YXJ0JywgZGF0YSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNoaWxkLnN0ZGVyci5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgY29uc29sZS5sb2coJ3N0ZGVycjogJyArIGRhdGEpO1xuICAgICAgZXZlbnQuZW1pdCgnZXJyb3InLCBkYXRhKTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbiAgXG4gIHB1YmxpYyBzdG9wKCkgOiB2b2lkIHtcbiAgIHRoaXMuY2hpbGQua2lsbCgpO1xuICAgdGhpcy5jaGlsZCA9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGluc3RhbGwoKSA6IEV2ZW50RW1pdHRlciB7XG4gICAgdmFyIGluc3RhbGwgPSBzcGF3bignbnBtJywgWydpbnN0YWxsJ10sIHsgY3dkOiBfX2Rpcm5hbWUgfSk7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgaW5zdGFsbC5zdGRvdXQub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKXtcbiAgICAgIGNvbnNvbGUubG9nKCdzdGRvdXQ6ICcgKyBkYXRhKTtcbiAgICAgIGV2ZW50LmVtaXQoJ2luc3RhbGwnLCBkYXRhKTtcbiAgICB9KTtcblxuICAgIGluc3RhbGwuc3RkZXJyLm9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSl7XG4gICAgICBjb25zb2xlLmxvZygnc3RkZXJyOiAnICsgZGF0YSk7XG4gICAgICBldmVudC5lbWl0KCdlcnJvcicsIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG4gIFxuICBwdWJsaWMgc3RhdGljIGlzSW5zdGVsbGVkKGNhbGxiYWNrOiBGdW5jdGlvbikgOnZvaWQge1xuICAgIHZhciB2ZXJzaW9uID0gc3Bhd24oJ2Jyb3dzZXJzLXN5bmMnLCBbJy0tdmVyc2lvbiddKTtcbiAgICBcbiAgICB2ZXJzaW9uLnN0ZG91dC5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgY2FsbGJhY2sodHJ1ZSwgZGF0YSk7XG4gICAgfSk7XG5cbiAgICB2ZXJzaW9uLnN0ZGVyci5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgY2FsbGJhY2soZmFsc2UsIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgdmVyc2lvbi5vbignZXJyb3InLCBmdW5jdGlvbihkYXRhKXtcbiAgICAgIGNhbGxiYWNrKGZhbHNlLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0cyA9IEJyb3dzZXJTeW5jU2VydmljZTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=