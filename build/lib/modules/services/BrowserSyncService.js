/// <reference path="../../../../../typings/github-electron/github-electron-renderer.d.ts" />;
/// <reference path="../../../../../typings/bluebird/bluebird.d.ts" />;
var Events = require('events');
var EventEmitter = Events.EventEmitter;
var Promise = require('bluebird');
var spawn = require('child_process').spawn;
var BrowserSyncService = (function () {
    function BrowserSyncService() {
        this.currentDir = __dirname;
        this.app = [];
        this.app.push(Const.PATH_TO_BROWSER_SYNC);
        this.app.push('start');
        this.app.push("--config");
        this.app.push(__dirname + "/../../../../bs-config.js");
        this.env = Object.create(process.env);
        console.log(__dirname + "/../../../node_modules/browser-sync/bin/browser-sync.js");
        this.child = null;
        return this;
    }
    BrowserSyncService.prototype.isRunning = function () {
        return (this.child) ? true : false;
    };
    BrowserSyncService.prototype.start = function () {
        if (this.child !== null) {
            throw new Error('BrowserSync has been already started.');
        }
        this.child = spawn('node', this.app, { cwd: __dirname });
        this.pid = spawn.pid;
        var event = new EventEmitter();
        this.child.stdout.on('data', function (data) {
            console.log('stdout: ' + data);
            event.emit('start', data);
        });
        this.child.stderr.on('data', function (data) {
            console.log('stderr: ' + data);
            event.emit('error', data);
        });
        return event;
    };
    BrowserSyncService.prototype.stop = function () {
        this.child.kill();
        this.child = null;
    };
    BrowserSyncService.install = function () {
        console.log("dir", __dirname);
        var install = spawn('npm', ['install', '--save-dev', 'browser-sync'], { cwd: __dirname });
        var event = new EventEmitter();
        install.stdout.on('data', function (data) {
            console.log('stdout: ' + data);
        });
        install.stderr.on('data', function (data) {
            console.log('stderr: ' + data);
        });
        install.on('error', function (data) {
            console.log('error: ' + data);
        });
        return event;
    };
    BrowserSyncService.isInstelled = function () {
        return new Promise(function (resolve, reject) {
            var version = spawn([Const.PATH_TO_BROWSER_SYNC, '--version']);
            version.stdout.on('data', function (data) {
                resolve(data);
            });
            version.stderr.on('data', function (data) {
                reject(data);
            });
            version.on('error', function (data) {
                reject(data);
            });
        });
    };
    BrowserSyncService.getUrlFromStdout = function (stdOut) {
        var reg = new RegExp('https?://[\w/:%#\$&\?\(\)~\.=\+\-]+');
        var matches = stdOut.match(reg);
        if (matches[0]) {
            return matches[0];
        }
        return '';
    };
    return BrowserSyncService;
})();
var Const;
(function (Const) {
    Const.PATH_TO_BROWSER_SYNC = __dirname + "/../../../node_modules/browser-sync/bin/browser-sync.js";
})(Const || (Const = {}));
module.exports = BrowserSyncService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tb2R1bGVzL3NlcnZpY2VzL0Jyb3dzZXJTeW5jU2VydmljZS50cyJdLCJuYW1lcyI6WyJCcm93c2VyU3luY1NlcnZpY2UiLCJCcm93c2VyU3luY1NlcnZpY2UuY29uc3RydWN0b3IiLCJCcm93c2VyU3luY1NlcnZpY2UuaXNSdW5uaW5nIiwiQnJvd3NlclN5bmNTZXJ2aWNlLnN0YXJ0IiwiQnJvd3NlclN5bmNTZXJ2aWNlLnN0b3AiLCJCcm93c2VyU3luY1NlcnZpY2UuaW5zdGFsbCIsIkJyb3dzZXJTeW5jU2VydmljZS5pc0luc3RlbGxlZCIsIkJyb3dzZXJTeW5jU2VydmljZS5nZXRVcmxGcm9tU3Rkb3V0IiwiQ29uc3QiXSwibWFwcGluZ3MiOiJBQUFBLDhGQUE4RjtBQUM5Rix1RUFBdUU7QUFHdkUsSUFBTyxNQUFNLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFDbEMsSUFBTyxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztBQUMxQyxJQUFPLE9BQU8sV0FBVyxVQUFVLENBQUMsQ0FBQztBQUNyQyxJQUFJLEtBQUssR0FBSyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBRTdDO0lBT0VBO1FBQ0VDLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLFNBQVNBLENBQUNBO1FBQzVCQSxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNkQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBO1FBQzFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFBQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFDMUJBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLDJCQUEyQkEsQ0FBQ0EsQ0FBQ0E7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Q0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDZkEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcEJBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO0lBQ1pBLENBQUNBO0lBQ0hQLHlCQUFDQTtBQUFEQSxDQXpHQSxBQXlHQ0EsSUFBQTtBQUdELElBQU8sS0FBSyxDQUVYO0FBRkQsV0FBTyxLQUFLLEVBQUMsQ0FBQztJQUNHUSwwQkFBb0JBLEdBQUdBLFNBQVNBLEdBQUdBLHlEQUF5REEsQ0FBQ0E7QUFDOUdBLENBQUNBLEVBRk0sS0FBSyxLQUFMLEtBQUssUUFFWDtBQUpELGlCQUFTLGtCQUFrQixDQUFDIiwiZmlsZSI6ImxpYi9tb2R1bGVzL3NlcnZpY2VzL0Jyb3dzZXJTeW5jU2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi8uLi8uLi90eXBpbmdzL2dpdGh1Yi1lbGVjdHJvbi9naXRodWItZWxlY3Ryb24tcmVuZGVyZXIuZC50c1wiIC8+O1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uLy4uLy4uL3R5cGluZ3MvYmx1ZWJpcmQvYmx1ZWJpcmQuZC50c1wiIC8+O1xuXG5pbXBvcnQgcmVtb3RlID0gcmVxdWlyZSgncmVtb3RlJyk7XG5pbXBvcnQgRXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5pbXBvcnQgRXZlbnRFbWl0dGVyID0gRXZlbnRzLkV2ZW50RW1pdHRlcjtcbmltcG9ydCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbnZhciBzcGF3biAgID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduO1xuXG5jbGFzcyBCcm93c2VyU3luY1NlcnZpY2Uge1xuICBwcml2YXRlIGN1cnJlbnREaXI6c3RyaW5nO1xuICBwcml2YXRlIGFwcDpBcnJheTxzdHJpbmc+O1xuICBwcml2YXRlIHBpZDpOdW1iZXI7XG4gIHByaXZhdGUgY2hpbGQ6YW55OyAvLyBjbGkgY2hpbGQgcHJvY2Vzc1xuICBwcml2YXRlIGVudjpPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jdXJyZW50RGlyID0gX19kaXJuYW1lO1xuICAgIHRoaXMuYXBwID0gW107XG4gICAgdGhpcy5hcHAucHVzaChDb25zdC5QQVRIX1RPX0JST1dTRVJfU1lOQyk7XG4gICAgdGhpcy5hcHAucHVzaCgnc3RhcnQnKVxuICAgIHRoaXMuYXBwLnB1c2goXCItLWNvbmZpZ1wiKTtcbiAgICB0aGlzLmFwcC5wdXNoKF9fZGlybmFtZSArIFwiLy4uLy4uLy4uLy4uL2JzLWNvbmZpZy5qc1wiKTtcbiAgICB0aGlzLmVudiA9IE9iamVjdC5jcmVhdGUoIHByb2Nlc3MuZW52ICk7XG5cbiAgICBjb25zb2xlLmxvZyhfX2Rpcm5hbWUgKyBcIi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1zeW5jL2Jpbi9icm93c2VyLXN5bmMuanNcIik7XG5cbiAgICB0aGlzLmNoaWxkID0gbnVsbDtcbiAgICBcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBcbiAgcHVibGljIGlzUnVubmluZygpIDogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLmNoaWxkKSA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydCgpIDogRXZlbnRFbWl0dGVyIHtcbiAgICBpZiAodGhpcy5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCcm93c2VyU3luYyBoYXMgYmVlbiBhbHJlYWR5IHN0YXJ0ZWQuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGlsZCA9IHNwYXduKCdub2RlJywgdGhpcy5hcHAsIHsgY3dkOiBfX2Rpcm5hbWUgfSk7XG4gICAgdGhpcy5waWQgPSBzcGF3bi5waWQ7XG5cbiAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICB0aGlzLmNoaWxkLnN0ZG91dC5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgY29uc29sZS5sb2coJ3N0ZG91dDogJyArIGRhdGEpO1xuICAgICAgZXZlbnQuZW1pdCgnc3RhcnQnLCBkYXRhKTtcbiAgICB9KTtcblxuICAgIHRoaXMuY2hpbGQuc3RkZXJyLm9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSl7XG4gICAgICBjb25zb2xlLmxvZygnc3RkZXJyOiAnICsgZGF0YSk7XG4gICAgICBldmVudC5lbWl0KCdlcnJvcicsIGRhdGEpO1xuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBldmVudDtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wKCkgOiB2b2lkIHtcbiAgIHRoaXMuY2hpbGQua2lsbCgpO1xuICAgdGhpcy5jaGlsZCA9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGluc3RhbGwoKSA6IEV2ZW50RW1pdHRlciB7XG4gICAgY29uc29sZS5sb2coXCJkaXJcIiwgX19kaXJuYW1lKTtcbiAgICB2YXIgaW5zdGFsbCA9IHNwYXduKCducG0nLCBbJ2luc3RhbGwnLCAnLS1zYXZlLWRldicsICdicm93c2VyLXN5bmMnXSwgeyBjd2Q6IF9fZGlybmFtZSB9KTtcbiAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBpbnN0YWxsLnN0ZG91dC5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgY29uc29sZS5sb2coJ3N0ZG91dDogJyArIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgaW5zdGFsbC5zdGRlcnIub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKXtcbiAgICAgIGNvbnNvbGUubG9nKCdzdGRlcnI6ICcgKyBkYXRhKTtcbiAgICB9KTtcblxuICAgIGluc3RhbGwub24oJ2Vycm9yJywgZnVuY3Rpb24oZGF0YSl7XG4gICAgICBjb25zb2xlLmxvZygnZXJyb3I6ICcgKyBkYXRhKTtcbiAgICB9KTtcblxuXG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG4gIFxuICBwdWJsaWMgc3RhdGljIGlzSW5zdGVsbGVkKCkgOlByb21pc2U8YW55PiB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIHZhciB2ZXJzaW9uID0gc3Bhd24oW0NvbnN0LlBBVEhfVE9fQlJPV1NFUl9TWU5DLCAnLS12ZXJzaW9uJ10pO1xuXG4gICAgICB2ZXJzaW9uLnN0ZG91dC5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfSk7XG5cbiAgICAgIHZlcnNpb24uc3RkZXJyLm9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgIHJlamVjdChkYXRhKTtcbiAgICAgIH0pO1xuICBcbiAgICAgIHZlcnNpb24ub24oJ2Vycm9yJywgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgIHJlamVjdChkYXRhKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICB9XG4gIFxuICBwdWJsaWMgc3RhdGljIGdldFVybEZyb21TdGRvdXQoc3RkT3V0OnN0cmluZykgOnN0cmluZyB7XG4gICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoJ2h0dHBzPzovL1tcXHcvOiUjXFwkJlxcP1xcKFxcKX5cXC49XFwrXFwtXSsnKTtcbiAgICB2YXIgbWF0Y2hlcyA9IHN0ZE91dC5tYXRjaChyZWcpO1xuXG4gICAgaWYgKG1hdGNoZXNbMF0pIHtcbiAgICAgIHJldHVybiBtYXRjaGVzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cbmV4cG9ydCA9IEJyb3dzZXJTeW5jU2VydmljZTtcblxubW9kdWxlIENvbnN0IHtcbiAgICBleHBvcnQgY29uc3QgUEFUSF9UT19CUk9XU0VSX1NZTkMgPSBfX2Rpcm5hbWUgKyBcIi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1zeW5jL2Jpbi9icm93c2VyLXN5bmMuanNcIjtcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=