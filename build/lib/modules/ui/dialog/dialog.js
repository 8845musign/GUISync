/// <reference path="../../../../../../typings/github-electron/github-electron-renderer.d.ts" />;
var Dialog = (function () {
    function Dialog() {
    }
    Dialog.normal = function (opt) {
        var buttonText = opt.buttonText || "OK";
        this.showOverlay();
        var el = this.buildDialog(opt.text, buttonText);
        var listener = function (e) {
            if (opt.callback)
                opt.callback(e);
            this.destory(el, listener);
        };
        el.querySelector('.js-dialogBtn__ok').addEventListener('click', listener.bind(this));
        document.body.appendChild(el);
    };
    Dialog.destory = function (el, listener) {
        el.removeEventListener('click', listener);
        document.body.removeChild(el);
        el = null;
        var overlay = document.querySelector("." + DialogConst.OVERLAY_CLASS);
        document.body.removeChild(overlay);
        overlay = null;
    };
    Dialog.showOverlay = function () {
        var overlayEl = document.querySelector("." + DialogConst.OVERLAY_CLASS);
        if (!overlayEl) {
            var el = this.buildOverlay();
            document.body.appendChild(el);
            overlayEl = el;
        }
    };
    Dialog.buildDialog = function (text, buttonText) {
        var el = document.createElement('div');
        el.classList.add("dialog");
        el.classList.add("js-dialog");
        var html = "\n      <div class=\"dialog__text\">" + text + "</div>\n      <div class=\"dialog__action\">\n        <button type=\"button\" class=\"btn dialog__btn js-dialogBtn__ok\">" + buttonText + "</button>\n      </div>\n    ";
        el.innerHTML = html;
        return el;
    };
    /**
     * build Dialog Overlay Element
     */
    Dialog.buildOverlay = function () {
        var el = document.createElement('div');
        el.classList.add(DialogConst.OVERLAY_CLASS);
        return el;
    };
    return Dialog;
})();
var DialogConst;
(function (DialogConst) {
    DialogConst.OVERLAY_CLASS = "dialog__overlay";
})(DialogConst || (DialogConst = {}));
module.exports = Dialog;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tb2R1bGVzL3VpL2RpYWxvZy9EaWFsb2cudHMiXSwibmFtZXMiOlsiRGlhbG9nIiwiRGlhbG9nLmNvbnN0cnVjdG9yIiwiRGlhbG9nLm5vcm1hbCIsIkRpYWxvZy5kZXN0b3J5IiwiRGlhbG9nLnNob3dPdmVybGF5IiwiRGlhbG9nLmJ1aWxkRGlhbG9nIiwiRGlhbG9nLmJ1aWxkT3ZlcmxheSIsIkRpYWxvZ0NvbnN0Il0sIm1hcHBpbmdzIjoiQUFBQSxpR0FBaUc7QUFDakc7SUFHRUE7SUFDQUMsQ0FBQ0E7SUFFYUQsYUFBTUEsR0FBcEJBLFVBQXFCQSxHQUEwREE7UUFDN0VFLElBQUlBLFVBQVVBLEdBQUdBLEdBQUdBLENBQUNBLFVBQVVBLElBQUlBLElBQUlBLENBQUNBO1FBQ3hDQSxJQUFJQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQTtRQUNuQkEsSUFBSUEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFFaERBLElBQUlBLFFBQVFBLEdBQWdDQSxVQUFTQSxDQUFPQTtZQUMxRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO2dCQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFBQTtRQUVEQSxFQUFFQSxDQUFDQSxhQUFhQSxDQUFDQSxtQkFBbUJBLENBQUNBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsT0FBT0EsRUFBRUEsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckZBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO0lBQ2hDQSxDQUFDQTtJQUVjRixjQUFPQSxHQUF0QkEsVUFBdUJBLEVBQWNBLEVBQUVBLFFBQXNCQTtRQUMzREcsRUFBRUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxPQUFPQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUMxQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDOUJBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBO1FBRVZBLElBQUlBLE9BQU9BLEdBQWdCQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxHQUFHQSxXQUFXQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtRQUNuRkEsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDbkNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBO0lBQ2pCQSxDQUFDQTtJQUVjSCxrQkFBV0EsR0FBMUJBO1FBQ0VJLElBQUlBLFNBQVNBLEdBQWdCQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxHQUFHQSxXQUFXQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtRQUNyRkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDZkEsSUFBSUEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0E7WUFDN0JBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQzlCQSxTQUFTQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNqQkEsQ0FBQ0E7SUFDSEEsQ0FBQ0E7SUFFY0osa0JBQVdBLEdBQTFCQSxVQUEyQkEsSUFBV0EsRUFBRUEsVUFBaUJBO1FBQ3ZESyxJQUFJQSxFQUFFQSxHQUFnQkEsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDcERBLEVBQUVBLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1FBQzNCQSxFQUFFQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUU5QkEsSUFBSUEsSUFBSUEsR0FBR0EseUNBQ21CQSxJQUFJQSxpSUFFbUNBLFVBQVVBLGtDQUU5RUEsQ0FBQUE7UUFFREEsRUFBRUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFcEJBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO0lBQ1pBLENBQUNBO0lBRURMOztPQUVHQTtJQUNZQSxtQkFBWUEsR0FBM0JBO1FBQ0VNLElBQUlBLEVBQUVBLEdBQWdCQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUNwREEsRUFBRUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7UUFDNUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO0lBQ1pBLENBQUNBO0lBQ0hOLGFBQUNBO0FBQURBLENBaEVBLEFBZ0VDQSxJQUFBO0FBR0QsSUFBTyxXQUFXLENBRWpCO0FBRkQsV0FBTyxXQUFXLEVBQUEsQ0FBQztJQUNGTyx5QkFBYUEsR0FBUUEsaUJBQWlCQSxDQUFDQTtBQUN4REEsQ0FBQ0EsRUFGTSxXQUFXLEtBQVgsV0FBVyxRQUVqQjtBQUpELGlCQUFTLE1BQU0sQ0FBQyIsImZpbGUiOiJsaWIvbW9kdWxlcy91aS9kaWFsb2cvRGlhbG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uLy4uLy4uLy4uL3R5cGluZ3MvZ2l0aHViLWVsZWN0cm9uL2dpdGh1Yi1lbGVjdHJvbi1yZW5kZXJlci5kLnRzXCIgLz47XG5jbGFzcyBEaWFsb2cge1xuICBwcml2YXRlIG92ZXJsYXlFbDpIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuICBcbiAgcHVibGljIHN0YXRpYyBub3JtYWwob3B0OiB7dGV4dDpzdHJpbmcsIGJ1dHRvblRleHQ/OnN0cmluZywgY2FsbGJhY2s/OkZ1bmN0aW9ufSk6dm9pZCB7XG4gICAgdmFyIGJ1dHRvblRleHQgPSBvcHQuYnV0dG9uVGV4dCB8fCBcIk9LXCI7XG4gICAgdGhpcy5zaG93T3ZlcmxheSgpO1xuICAgIHZhciBlbCA9IHRoaXMuYnVpbGREaWFsb2cob3B0LnRleHQsIGJ1dHRvblRleHQpO1xuICAgIFxuICAgIHZhciBsaXN0ZW5lcjpFdmVudExpc3RlbmVyID0gPEV2ZW50TGlzdGVuZXI+ZnVuY3Rpb24oZTpFdmVudCl7XG4gICAgICBpZiAob3B0LmNhbGxiYWNrKSBvcHQuY2FsbGJhY2soZSk7XG4gICAgICB0aGlzLmRlc3RvcnkoZWwsIGxpc3RlbmVyKTtcbiAgICB9XG4gXG4gICAgZWwucXVlcnlTZWxlY3RvcignLmpzLWRpYWxvZ0J0bl9fb2snKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpc3RlbmVyLmJpbmQodGhpcykpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xuICB9XG4gIFxuICBwcml2YXRlIHN0YXRpYyBkZXN0b3J5KGVsOkhUTUxFbGVtZW50LCBsaXN0ZW5lcjpFdmVudExpc3RlbmVyKTp2b2lkIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGxpc3RlbmVyKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcbiAgICBlbCA9IG51bGw7XG4gICAgXG4gICAgdmFyIG92ZXJsYXkgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIiArIERpYWxvZ0NvbnN0Lk9WRVJMQVlfQ0xBU1MpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3ZlcmxheSk7XG4gICAgb3ZlcmxheSA9IG51bGw7XG4gIH1cbiAgXG4gIHByaXZhdGUgc3RhdGljIHNob3dPdmVybGF5KCk6dm9pZCB7XG4gICAgdmFyIG92ZXJsYXlFbCA9IDxIVE1MRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiICsgRGlhbG9nQ29uc3QuT1ZFUkxBWV9DTEFTUyk7XG4gICAgaWYgKCFvdmVybGF5RWwpIHtcbiAgICAgIHZhciBlbCA9IHRoaXMuYnVpbGRPdmVybGF5KCk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcbiAgICAgIG92ZXJsYXlFbCA9IGVsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGJ1aWxkRGlhbG9nKHRleHQ6c3RyaW5nLCBidXR0b25UZXh0OnN0cmluZyk6SFRNTEVsZW1lbnR7XG4gICAgdmFyIGVsID0gPEhUTUxFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoXCJkaWFsb2dcIik7XG4gICAgZWwuY2xhc3NMaXN0LmFkZChcImpzLWRpYWxvZ1wiKTtcblxuICAgIHZhciBodG1sID0gYFxuICAgICAgPGRpdiBjbGFzcz1cImRpYWxvZ19fdGV4dFwiPiR7dGV4dH08L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkaWFsb2dfX2FjdGlvblwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBkaWFsb2dfX2J0biBqcy1kaWFsb2dCdG5fX29rXCI+JHtidXR0b25UZXh0fTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgYFxuICAgIFxuICAgIGVsLmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICByZXR1cm4gZWw7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBidWlsZCBEaWFsb2cgT3ZlcmxheSBFbGVtZW50XG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBidWlsZE92ZXJsYXkoKTpIVE1MRWxlbWVudHtcbiAgICB2YXIgZWwgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWwuY2xhc3NMaXN0LmFkZChEaWFsb2dDb25zdC5PVkVSTEFZX0NMQVNTKTtcbiAgICByZXR1cm4gZWw7XG4gIH1cbn1cbmV4cG9ydCA9IERpYWxvZztcblxubW9kdWxlIERpYWxvZ0NvbnN0e1xuICAgIGV4cG9ydCBjb25zdCBPVkVSTEFZX0NMQVNTICAgICAgPSBcImRpYWxvZ19fb3ZlcmxheVwiO1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==