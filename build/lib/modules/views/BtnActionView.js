/// <reference path="../../../../../typings/github-electron/github-electron-renderer.d.ts" />;
/// <reference path="../../../../../typings/node/node.d.ts" />;
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events = require('events');
var EventEmitter = events.EventEmitter;
var BtnActionView = (function (_super) {
    __extends(BtnActionView, _super);
    /**
     * constructor
     */
    function BtnActionView(options) {
        _super.call(this);
        this.el = document.querySelector(options.selector);
        this.startFunc = options.startFunc;
        this.stopFunc = options.stopFunc;
        this.init();
    }
    /**
     * initialize
     */
    BtnActionView.prototype.init = function () {
        this.mode = Mode.start;
        this.el.classList.add(Const.CSS_CLASS_START);
        this.el.addEventListener('click', this.onClick.bind(this));
    };
    /**
     * on click
     */
    BtnActionView.prototype.onClick = function (e) {
        if (this.mode === Mode.start) {
            this.start();
        }
        else {
            this.stop();
        }
        e.preventDefault();
    };
    /**
     * start function
     */
    BtnActionView.prototype.start = function () {
        this.startFunc(this);
        this.el.classList.remove(Const.CSS_CLASS_START);
        this.el.classList.add(Const.CSS_CLASS_STOP);
    };
    /**
     * stop function
     */
    BtnActionView.prototype.stop = function () {
        this.stopFunc(this);
        this.el.classList.remove(Const.CSS_CLASS_STOP);
        this.el.classList.add(Const.CSS_CLASS_START);
    };
    return BtnActionView;
})(EventEmitter);
/**
 * Button Mode
 */
var Mode;
(function (Mode) {
    Mode[Mode["start"] = 0] = "start";
    Mode[Mode["stop"] = 1] = "stop";
})(Mode || (Mode = {}));
/**
 * const
 */
var Const;
(function (Const) {
    Const.CSS_CLASS_START = 'btnAction--start';
    Const.CSS_CLASS_STOP = 'btnAction--stop';
})(Const || (Const = {}));
module.exports = BtnActionView;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tb2R1bGVzL3ZpZXdzL0J0bkFjdGlvblZpZXcudHMiXSwibmFtZXMiOlsiQnRuQWN0aW9uVmlldyIsIkJ0bkFjdGlvblZpZXcuY29uc3RydWN0b3IiLCJCdG5BY3Rpb25WaWV3LmluaXQiLCJCdG5BY3Rpb25WaWV3Lm9uQ2xpY2siLCJCdG5BY3Rpb25WaWV3LnN0YXJ0IiwiQnRuQWN0aW9uVmlldy5zdG9wIiwiTW9kZSIsIkNvbnN0Il0sIm1hcHBpbmdzIjoiQUFBQSw4RkFBOEY7QUFDOUYsK0RBQStEOzs7Ozs7QUFFL0QsSUFBTyxNQUFNLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFDbEMsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQTtBQUV0QztJQUE0QkEsaUNBQVlBO0lBTXBDQTs7T0FFR0E7SUFDSEEsdUJBQVlBLE9BQWdFQTtRQUN4RUMsaUJBQU9BLENBQUNBO1FBQ1JBLElBQUlBLENBQUNBLEVBQUVBLEdBQXdCQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUN4RUEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBSUEsT0FBT0EsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFDcENBLElBQUlBLENBQUNBLFFBQVFBLEdBQUtBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBO1FBRW5DQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtJQUNoQkEsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0tBLDRCQUFJQSxHQUFaQTtRQUNJRSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7UUFFN0NBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsT0FBT0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDL0RBLENBQUNBO0lBRURGOztPQUVHQTtJQUNLQSwrQkFBT0EsR0FBZkEsVUFBZ0JBLENBQU9BO1FBQ25CRyxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxLQUFLQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMzQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFDakJBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ0pBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUVEQSxDQUFDQSxDQUFDQSxjQUFjQSxFQUFFQSxDQUFDQTtJQUN2QkEsQ0FBQ0E7SUFFREg7O09BRUdBO0lBQ0tBLDZCQUFLQSxHQUFiQTtRQUNJSSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7UUFDaERBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBO0lBQ2hEQSxDQUFDQTtJQUVESjs7T0FFR0E7SUFDS0EsNEJBQUlBLEdBQVpBO1FBQ0lLLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ3BCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQTtRQUMvQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7SUFDakRBLENBQUNBO0lBQ0xMLG9CQUFDQTtBQUFEQSxDQTFEQSxBQTBEQ0EsRUExRDJCLFlBQVksRUEwRHZDO0FBR0Q7O0dBRUc7QUFDSCxJQUFLLElBR0o7QUFIRCxXQUFLLElBQUk7SUFDUk0saUNBQUtBLENBQUFBO0lBQ0xBLCtCQUFJQSxDQUFBQTtBQUNMQSxDQUFDQSxFQUhJLElBQUksS0FBSixJQUFJLFFBR1I7QUFFRDs7R0FFRztBQUNILElBQU8sS0FBSyxDQUdYO0FBSEQsV0FBTyxLQUFLLEVBQUMsQ0FBQztJQUNHQyxxQkFBZUEsR0FBTUEsa0JBQWtCQSxDQUFDQTtJQUN4Q0Esb0JBQWNBLEdBQU9BLGlCQUFpQkEsQ0FBQ0E7QUFDeERBLENBQUNBLEVBSE0sS0FBSyxLQUFMLEtBQUssUUFHWDtBQWhCRCxpQkFBUyxhQUFhLENBQUMiLCJmaWxlIjoibGliL21vZHVsZXMvdmlld3MvQnRuQWN0aW9uVmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi8uLi8uLi90eXBpbmdzL2dpdGh1Yi1lbGVjdHJvbi9naXRodWItZWxlY3Ryb24tcmVuZGVyZXIuZC50c1wiIC8+O1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uLy4uLy4uL3R5cGluZ3Mvbm9kZS9ub2RlLmQudHNcIiAvPjtcblxuaW1wb3J0IGV2ZW50cyA9IHJlcXVpcmUoJ2V2ZW50cycpO1xudmFyIEV2ZW50RW1pdHRlciA9IGV2ZW50cy5FdmVudEVtaXR0ZXJcblxuY2xhc3MgQnRuQWN0aW9uVmlldyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgcHJpdmF0ZSBlbDpIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIHN0YXJ0RnVuYzpGdW5jdGlvbjtcbiAgICBwcml2YXRlIHN0b3BGdW5jOkZ1bmN0aW9uO1xuICAgIHByaXZhdGUgbW9kZTpNb2RlO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOntzZWxlY3RvcjpzdHJpbmcsIHN0YXJ0RnVuYzpGdW5jdGlvbiwgc3RvcEZ1bmM6RnVuY3Rpb259KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZWwgICAgICAgICA9IDxIVE1MRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMuc2VsZWN0b3IpO1xuICAgICAgICB0aGlzLnN0YXJ0RnVuYyAgPSBvcHRpb25zLnN0YXJ0RnVuYztcbiAgICAgICAgdGhpcy5zdG9wRnVuYyAgID0gb3B0aW9ucy5zdG9wRnVuYztcblxuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbml0aWFsaXplXG4gICAgICovXG4gICAgcHJpdmF0ZSBpbml0KCk6dm9pZCB7XG4gICAgICAgIHRoaXMubW9kZSA9IE1vZGUuc3RhcnQ7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZChDb25zdC5DU1NfQ0xBU1NfU1RBUlQpO1xuXG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSk7XG4gICAgfVxuXHRcbiAgICAvKipcbiAgICAgKiBvbiBjbGlja1xuICAgICAqL1xuICAgIHByaXZhdGUgb25DbGljayhlOkV2ZW50KTp2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZS5zdGFydCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc3RhcnQgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXJ0KCk6dm9pZCB7XG4gICAgICAgIHRoaXMuc3RhcnRGdW5jKHRoaXMpO1xuICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoQ29uc3QuQ1NTX0NMQVNTX1NUQVJUKTtcbiAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKENvbnN0LkNTU19DTEFTU19TVE9QKTtcbiAgICB9XG5cdFxuICAgIC8qKlxuICAgICAqIHN0b3AgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0b3AoKTp2b2lkIHtcbiAgICAgICAgdGhpcy5zdG9wRnVuYyh0aGlzKTtcbiAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKENvbnN0LkNTU19DTEFTU19TVE9QKTtcbiAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKENvbnN0LkNTU19DTEFTU19TVEFSVCk7XG4gICAgfVxufVxuZXhwb3J0ID0gQnRuQWN0aW9uVmlldztcblxuLyoqXG4gKiBCdXR0b24gTW9kZVxuICovXG5lbnVtIE1vZGV7XG5cdHN0YXJ0LFxuXHRzdG9wXG59XG5cbi8qKlxuICogY29uc3RcbiAqL1xubW9kdWxlIENvbnN0IHtcbiAgICBleHBvcnQgY29uc3QgQ1NTX0NMQVNTX1NUQVJUICAgID0gJ2J0bkFjdGlvbi0tc3RhcnQnO1xuICAgIGV4cG9ydCBjb25zdCBDU1NfQ0xBU1NfU1RPUCAgICAgPSAnYnRuQWN0aW9uLS1zdG9wJztcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=